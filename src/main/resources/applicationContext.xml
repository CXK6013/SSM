<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--配置扫描器-->
    <context:component-scan base-package="org.example"/>


    <mvc:annotation-driven/>

    <bean id = "placeholderConfigurer" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.dev.driver}">
        </property>
        <property name = "url" value="${jdbc.dev.url}">
        </property>
        <property name = "username" value = "${jdbc.dev.username}">
        </property>
        <property name = "password" value = "${jdbc.dev.password}">
        </property>
    </bean>



    <bean  id = "sqlSessionFactory"  class = "org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref = "dataSource"></property>
        <property name = "mapperLocations" value="classpath*:org/example/mybatis/*.xml">
        </property>
    </bean>

    <bean  id = "mapperScannerConfigurer" class = "org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value = "org.example.mybatis" />
        <property name="sqlSessionFactoryBeanName" value = "sqlSessionFactory"></property>
    </bean>





    <!-- 这个配置是开启AOP用的,记得一定要加-->
    <aop:aspectj-autoproxy/>



<!--    &lt;!&ndash; 这个配置是开启AOP用的,记得一定要加&ndash;&gt;-->
<!--    <aop:aspectj-autoproxy/>-->
<!--    &lt;!&ndash;加载配置文件&ndash;&gt;-->
<!--    <bean id = "placeholderConfigurer" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">-->
<!--        <property name="locations">-->
<!--            <list>-->
<!--                <value>classpath:jdbc.properties</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->


<!--    <bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource">-->
<!--        <property name="driverClassName" value="${jdbc.dev.driver}">-->
<!--        </property>-->
<!--        <property name = "url" value="${jdbc.dev.driver}">-->
<!--        </property>-->
<!--        <property name = "username" value = "${jdbc.dev.username}">-->
<!--        </property>-->
<!--        <property name = "password" value = "${jdbc.dev.password}">-->
<!--        </property>-->
<!--    </bean>-->
<!--    <bean id = "configLocation" >-->

<!--    </bean>-->


<!--    <bean  id = "sqlSessionFactory"  class = "org.mybatis.spring.SqlSessionFactoryBean">-->
<!--        <property name="dataSource" ref = "dataSource"></property>-->
<!--        <property name = "mapperLocations" value="org\example\mybatis\*.xml">-->
<!--        </property>-->
<!--        <property name="configLocation"  ref="configLocation"></property>-->
<!--    </bean>-->

<!--    <bean  id = "mapperScannerConfigurer" class = "org.mybatis.spring.mapper.MapperScannerConfigurer">-->
<!--        <property name="basePackage" value = "org.example.mybatis" />-->
<!--        <property name="sqlSessionFactoryBeanName" value = "sqlSessionFactory"></property>-->
<!--     </bean>-->





<!--    <bean id="commonsMultipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
<!--        <property name="maxUploadSize">-->
<!--            &lt;!&ndash;单位是B 1048576 = 1024 * 1024 &ndash;&gt;-->
<!--            <value>1048576</value>-->
<!--        </property>-->
<!--    </bean>-->
<!--    <mvc:interceptors>-->
<!--            <mvc:interceptor>-->
<!--&lt;!&ndash;                /*: 只能拦截一级路径&ndash;&gt;-->
<!--&lt;!&ndash;                /**: 可以拦截一级或多级路径&ndash;&gt;-->
<!--                <mvc:mapping path = "/**"/>-->
<!--                <mvc:exclude-mapping path="login"/>-->
<!--                <bean class="org.example.mvc.MyHandlerInterceptor"></bean>-->
<!--            </mvc:interceptor>-->
<!--    </mvc:interceptors>-->


<!--&lt;!&ndash;    <bean id="simpleMappingExceptionResolver"  class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">&ndash;&gt;-->
<!--&lt;!&ndash;        &lt;!&ndash; 定义默认的异常处理页面,当该异常类型发生时跳转到error页面&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;        <property name="defaultErrorView" value="error"/>&ndash;&gt;-->
<!--&lt;!&ndash;        &lt;!&ndash;定义异常处理页面用来获取异常信息的变量名,默认名为exception&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;        <property name="exceptionAttribute" value="ex"/>&ndash;&gt;-->
<!--&lt;!&ndash;        &lt;!&ndash;定义需要特殊处理的异常,有两种配置方式 1种是value标签方式  2.props标签方式  还是配置类更好,无需关心这些细节&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;        <property name="exceptionMappings">&ndash;&gt;-->
<!--&lt;!&ndash;            &lt;!&ndash; value标签多个异常用逗号隔开&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;&lt;!&ndash;            <value>&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;&lt;!&ndash;                java.lang.ArithmeticException=error,&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;&lt;!&ndash;                java.lang.NullPointerException=exception&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;&lt;!&ndash;            </value>&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;            &lt;!&ndash; props标签,每个prop标签的key代表处理一种异常,prop标签中代表具体要跳转的页面 &ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;            <props>&ndash;&gt;-->
<!--&lt;!&ndash;                <prop key="java.lang.ArithmeticException">&ndash;&gt;-->
<!--&lt;!&ndash;                    error&ndash;&gt;-->
<!--&lt;!&ndash;                </prop>&ndash;&gt;-->
<!--&lt;!&ndash;            </props>&ndash;&gt;-->
<!--&lt;!&ndash;        </property>&ndash;&gt;-->
<!--&lt;!&ndash;    </bean>&ndash;&gt;-->

<!--&lt;!&ndash;    <bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver">&ndash;&gt;-->

<!--&lt;!&ndash;    </bean>&ndash;&gt;-->


<!--    <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
<!--        <property name="prefix" value="view/"></property>-->
<!--        <property name="suffix" value=".jsp"></property>-->
<!--    </bean>-->


<!--    &lt;!&ndash;    <bean id = "logBefore" class="org.example.aop.LogBefore">&ndash;&gt;-->
<!--    &lt;!&ndash;    </bean>&ndash;&gt;-->


<!--    <bean id="landlord" class="org.example.aop.Landlord">-->
<!--    </bean>-->


<!--    &lt;!&ndash;    <bean id = "logAfter" class="org.example.aop.LogAfter">&ndash;&gt;-->

<!--    &lt;!&ndash;    </bean>&ndash;&gt;-->

<!--    &lt;!&ndash;    <bean id = "logException" class = "org.example.aop.LogException">&ndash;&gt;-->
<!--    &lt;!&ndash;    </bean>&ndash;&gt;-->

<!--    &lt;!&ndash;    <bean id = "logAround" class = "org.example.aop.LogAround">&ndash;&gt;-->
<!--    &lt;!&ndash;    </bean>&ndash;&gt;-->


<!--    &lt;!&ndash;    <aop:config>&ndash;&gt;-->
<!--    &lt;!&ndash;        <aop:pointcut id = "pointCut" expression = "execution(public void org.example.aop.Landlord.rentHouse())"/>&ndash;&gt;-->
<!--    &lt;!&ndash;        <aop:advisor advice-ref="logAround" pointcut-ref="pointCut"></aop:advisor>&ndash;&gt;-->
<!--    &lt;!&ndash;    </aop:config>&ndash;&gt;-->


<!--    &lt;!&ndash;    <aop:config>&ndash;&gt;-->
<!--    &lt;!&ndash;        <aop:pointcut id = "pointCut" expression = "execution(public void org.example.aop.Landlord.rentHouse())"/>&ndash;&gt;-->
<!--    &lt;!&ndash;        <aop:advisor advice-ref="logException" pointcut-ref="pointCut"></aop:advisor>&ndash;&gt;-->
<!--    &lt;!&ndash;    </aop:config>&ndash;&gt;-->


<!--    &lt;!&ndash;    <aop:config>&ndash;&gt;-->
<!--    &lt;!&ndash;        <aop:pointcut id = "pointCut" expression = "execution(public void org.example.aop.Landlord.rentHouse())"/>&ndash;&gt;-->
<!--    &lt;!&ndash;        <aop:advisor advice-ref="logBefore" pointcut-ref="pointCut"></aop:advisor>&ndash;&gt;-->
<!--    &lt;!&ndash;    </aop:config>&ndash;&gt;-->
<!--    &lt;!&ndash;    <aop:config>&ndash;&gt;-->
<!--    &lt;!&ndash;        <aop:pointcut id = "pointCut" expression = " execution(public void org.example.aop.Landlord.rentHouse())"/>&ndash;&gt;-->
<!--    &lt;!&ndash;        <aop:advisor advice-ref="logAfter" pointcut-ref="pointCut"></aop:advisor>&ndash;&gt;-->
<!--    &lt;!&ndash;    </aop:config>&ndash;&gt;-->

<!--    <bean id="studentCard" class="org.example.ioc.StudentCard">-->
<!--        <property name="id" value="1"></property>-->
<!--        <property name="cardNo" value="zs"></property>-->
<!--    </bean>-->

<!--    <bean id="student" class="org.example.ioc.Student" lazy-init="true">-->
<!--        <property name="age">-->
<!--            <value>34</value>-->
<!--        </property>-->
<!--    </bean>-->


<!--    <bean id="collectionDemo" class="org.example.ioc.CollectionDemo">-->
<!--        <property name="list">-->
<!--            <value>-->
<!--                14-->
<!--            </value>-->
<!--        </property>-->
<!--        <property name="arrayString">-->
<!--            <array>-->
<!--                <value>ddd</value>-->
<!--            </array>-->
<!--        </property>-->
<!--        <property name="set">-->
<!--            <set>-->
<!--                <value>aaa</value>-->
<!--            </set>-->
<!--        </property>-->
<!--        <property name="map">-->
<!--            <map>-->
<!--                <entry>-->
<!--                    <key>-->
<!--                        <value>zs</value>-->
<!--                    </key>-->
<!--                    <value>zs</value>-->
<!--                </entry>-->
<!--            </map>-->
<!--        </property>-->
<!--        <property name="properties">-->
<!--            <props>-->
<!--                <prop key="aa">bb</prop>-->
<!--                <prop key="cc">dd</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--    </bean>-->

<!--    <aop:config>-->
<!--        <aop:pointcut id="schema" expression="execution(public void org.example.aop.Landlord.rentHouse(int ))"/>-->
<!--        <aop:aspect ref="logSchema">-->
<!--            <aop:around method="invoke" pointcut-ref="schema" arg-names="joinPoint"/>-->
<!--            <aop:before method="before" pointcut-ref="schema" arg-names="joinPoint"/>-->
<!--            <aop:after-returning method="after" returning="returningValue" arg-names="joinPoint,returningValue"-->
<!--                                 pointcut-ref="schema"/>-->
<!--            <aop:after-throwing method="afterThrowing" pointcut-ref="schema" arg-names="joinPoint,ex" throwing="ex"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->
</beans>